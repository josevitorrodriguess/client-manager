// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, password) 
VALUES ($1, $2, $3)
RETURNING id, name, email, password
`

type CreateUserParams struct {
	Column1 sql.NullString
	Column2 sql.NullString
	Column3 sql.NullString
}

type CreateUserRow struct {
	ID       uuid.UUID
	Name     string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Column1, arg.Column2, arg.Column3)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, dollar_1 uuid.NullUUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, dollar_1)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $1, email = $2, password = $3
WHERE id = $4
RETURNING id, name, email
`

type UpdateUserParams struct {
	Column1 sql.NullString
	Column2 sql.NullString
	Column3 sql.NullString
	Column4 uuid.NullUUID
}

type UpdateUserRow struct {
	ID    uuid.UUID
	Name  string
	Email string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	var i UpdateUserRow
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}
